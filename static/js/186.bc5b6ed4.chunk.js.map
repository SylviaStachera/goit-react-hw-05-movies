{"version":3,"file":"static/js/186.bc5b6ed4.chunk.js","mappings":"8LAmCA,UA/BgB,WACf,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAUR,OARAE,EAAAA,EAAAA,YAAU,YACTC,EAAAA,EAAAA,IAAgBH,GACdI,MAAK,SAACC,GACNN,EAAWM,EAAKC,QAChB,IACAC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,EAAvB,GACR,GAAE,CAACR,KAGH,8BACC,wBACEF,EAAQa,OAAS,EACjBb,EAAQc,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACC,2BACC,qCAAaD,MACb,uBAAIC,MAFIF,EAKV,KAED,wEAKJ,C,sBClCD,SAASG,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOjB,GAEP,YADAW,EAAOX,EAET,CAEIgB,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAOrB,KAAKgB,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOc,GACdnB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASc,EACnE,CAEAf,OAAMgB,EACR,GACF,CACF,C,uJClCMC,EAAS,mCACTC,EAAU,gCAEHC,EAAW,6BAAG,+FACpBC,EADoB,UACXF,EADW,sCAC0BD,GAD1B,kBAGFI,MAAMD,GAHJ,cAGnBE,EAHmB,gBAINA,EAASC,OAJH,cAInBtC,EAJmB,yBAKlBA,GALkB,wCAOnB,IAAIuC,MAAM,qDAPS,0DAAH,qDAUXC,EAAY,6BAAG,WAAOC,GAAP,kFACrBN,EADqB,UACZF,EADY,gCACmBD,EADnB,kBACmCS,EADnC,gEAGHL,MAAMD,GAHH,cAGpBE,EAHoB,gBAIPA,EAASC,OAJF,cAIpBtC,EAJoB,yBAKnBA,GALmB,wCAOpB,IAAIuC,MAAM,iDAPU,0DAAH,sDAWZG,EAAe,6BAAG,WAAO/C,GAAP,kFACxBwC,EADwB,UACfF,EADe,iBACCtC,EADD,oBACoBqC,EADpB,qCAGNI,MAAMD,GAHA,cAGvBE,EAHuB,gBAIVA,EAASC,OAJC,cAIvBtC,EAJuB,yBAKtBA,GALsB,wCAOvB,IAAIuC,MAAM,oDAPa,0DAAH,sDAWfI,EAAe,6BAAG,WAAOhD,GAAP,kFACxBwC,EADwB,UACfF,EADe,iBACCtC,EADD,4BAC4BqC,EAD5B,qCAINI,MAAMD,GAJA,cAIvBE,EAJuB,gBAKVA,EAASC,OALC,cAKvBtC,EALuB,yBAMtBA,GANsB,wCAQvB,IAAIuC,MAAM,oDARa,0DAAH,sDAYfzC,EAAe,6BAAG,WAAOH,GAAP,kFACxBwC,EADwB,UACfF,EADe,iBACCtC,EADD,4BAC4BqC,EAD5B,4CAGNI,MAAMD,GAHA,cAGvBE,EAHuB,gBAIVA,EAASC,OAJC,cAIvBtC,EAJuB,yBAKtBA,GALsB,wCAOvB,IAAIuC,MAAM,oDAPa,0DAAH,qD","sources":["components/Reviews/Reviews.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","components/services/api.js"],"sourcesContent":["import { useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { getMovieReviews } from \"../services/api\";\n\nconst Reviews = () => {\n\tconst [reviews, setReviews] = useState([]);\n\tconst { movieId } = useParams();\n\n\tuseEffect(() => {\n\t\tgetMovieReviews(movieId)\n\t\t\t.then((data) => {\n\t\t\t\tsetReviews(data.results);\n\t\t\t})\n\t\t\t.catch((error) => console.log(error));\n\t}, [movieId]);\n\n\treturn (\n\t\t<section>\n\t\t\t<ul>\n\t\t\t\t{reviews.length > 0 ? (\n\t\t\t\t\treviews.map(({ id, author, content }) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li key={id}>\n\t\t\t\t\t\t\t\t<h4>Author: {author}</h4>\n\t\t\t\t\t\t\t\t<p>{content}</p>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t) : (\n\t\t\t\t\t<p>We don't have any reviews for this movie.</p>\n\t\t\t\t)}\n\t\t\t</ul>\n\t\t</section>\n\t);\n};\nexport default Reviews;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","const apiKey = \"5b510caffd74cc663774c058405dd762\";\nconst baseUrl = \"https://api.themoviedb.org/3/\";\n\nexport const getTrending = async () => {\n\tconst url = `${baseUrl}trending/movie/day?api_key=${apiKey}`;\n\ttry {\n\t\tconst response = await fetch(url);\n\t\tconst data = await response.json();\n\t\treturn data;\n\t} catch (error) {\n\t\tthrow new Error(\"An error occurred while fetching trending movies.\");\n\t}\n};\nexport const searchMovies = async (query) => {\n\tconst url = `${baseUrl}search/movie?api_key=${apiKey}&query=${query}&include_adult=false&language=en-US&page=1`;\n\ttry {\n\t\tconst response = await fetch(url);\n\t\tconst data = await response.json();\n\t\treturn data;\n\t} catch (error) {\n\t\tthrow new Error(\"An error occurred while searching for movies.\");\n\t}\n};\n\nexport const getMovieDetails = async (movieId) => {\n\tconst url = `${baseUrl}movie/${movieId}?api_key=${apiKey}&language=en-US`;\n\ttry {\n\t\tconst response = await fetch(url);\n\t\tconst data = await response.json();\n\t\treturn data;\n\t} catch (error) {\n\t\tthrow new Error(\"An error occurred while fetching movies details.\");\n\t}\n};\n\nexport const getMovieCredits = async (movieId) => {\n\tconst url = `${baseUrl}movie/${movieId}/credits?api_key=${apiKey}&language=en-US`;\n\n\ttry {\n\t\tconst response = await fetch(url);\n\t\tconst data = await response.json();\n\t\treturn data;\n\t} catch (error) {\n\t\tthrow new Error(\"An error occurred while fetching movies credits.\");\n\t}\n};\n\nexport const getMovieReviews = async (movieId) => {\n\tconst url = `${baseUrl}movie/${movieId}/reviews?api_key=${apiKey}&language=en-US&page=1`;\n\ttry {\n\t\tconst response = await fetch(url);\n\t\tconst data = await response.json();\n\t\treturn data;\n\t} catch (error) {\n\t\tthrow new Error(\"An error occurred while fetching movies reviews.\");\n\t}\n};\n"],"names":["useState","reviews","setReviews","movieId","useParams","useEffect","getMovieReviews","then","data","results","catch","error","console","log","length","map","id","author","content","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","apiKey","baseUrl","getTrending","url","fetch","response","json","Error","searchMovies","query","getMovieDetails","getMovieCredits"],"sourceRoot":""}